# $Id: ~/.shared_env wandsas 2018/07/13

# This should get run as part of setting up the environment
# of any sh-compatible shell, including non-interactive ones;
# hence it should be kept as fast and portable as possible.
# Note that that means silly things like [ ! -e foo ] rather
# than ! [ -e foo ] ...

# Allow disabling of entire environment suite
[[ -n "$INHERIT_ENV" ]] && return

[[ -n "$shared_env_loaded" ]] && return

# {{{ System profile

#[[ -r "/etc/profile" ]] && source /etc/profile

# }}}

# {{{ Locales

check_com locale && {
    export LANG=en_US.UTF-8
    export LC_COLLATE=C
    unset LC_ALL
}

# }}}

# {{{ Are we interactive?

case "$-" in
    (*i*) shell_interactive=y ;;
      (*) shell_interactive=  ;;
esac

# }}}

# {{{ Loading status

sh_load_status () {
    echo "$@"
}

# Default to 1, and treat empty as 0.  This ensures we have an integer.
: ${DEBUG_LOCAL_HOOKS=1}
: ${DEBUG_LOCAL_HOOKS:=0}

sh_load_status_dep () {
  # Find the name of the running shell
  _this_shell=${shell:-${0##*/}}

  # Find the filename of the running script
  if [ -n "$BASH_SOURCE" ]; then
    _this_script="${BASH_SOURCE[0]}"
    # Deduct 1 because array starts at 0, and another 1 because
    # we want to ignore this stack frame (inside sh_load_status)
    _this_script="${BASH_SOURCE[$(( ${#BASH_SOURCE[@]} - 2))]}"
    # Sheesh.  $ZSH_SOURCE[-2], anyone?
  else
    _this_script="$0"
    # Unfortunately in zsh there seems to be no way of determining
    # the currently running file if a function is being run, unless
    # function_argzero is unset :-/
    [ "$_this_script" = sh_load_status ] && _this_script=
    [ "$_this_script" = -zsh ] && _this_script=
  fi
  [ -n "$_this_script" ] && _this_script="[$_this_script]"

  # Leave status printed?

  if [ "$DEBUG_LOCAL_HOOKS" -ge 2 ]; then
    debug="\n"
  fi

  # \e[0K is clear to right
  if [ -n "$shell_interactive" ] && [ "$TERM" != 'dumb' ]; then
    _text="${_this_shell}${_this_script}: $*... "
    _text="${_text//\/home\//~}"
    echo -e -n "\r\e[0K$_text$debug"
  fi
}

sh_load_status .shared_env

# }}}

# {{{ ZDOTDIR, ZDOTDIRPATH, ZDOTUSER

# See .zshenv

zdotdir=${ZDOTDIR:-$HOME}
ZDOTDIR="$zdotdir"
ZDOT_RUN_HOOKS="$ZDOTDIR/.zsh/functions/run_hooks"
ZDOT_FIND_HOOKS="$ZDOTDIR/.zsh/functions/find_hooks"
export ZDOTDIR ZDOT_RUN_HOOKS ZDOT_FIND_HOOKS

# Define a search path to be used by run_hooks
if [ "$ZDOTDIR" = "$HOME" ]; then
  ZDOTDIRPATH=$ZDOTDIR
  ZDOTDIRREVPATH=$ZDOTDIR
else
  OTHER_USER=1
  export OTHER_USER
  ZDOTDIRPATH="$ZDOTDIR $HOME"
  ZDOTDIRREVPATH="$HOME $ZDOTDIR"
fi
export ZDOTDIRPATH ZDOTDIRREVPATH

[ -z "$ZDOTUSER" ] && [ -e ~/.zdotuser ] && ZDOTUSER=`cat ~/.zdotuser`
export ZDOTUSER

# }}}

# {{{ Environment variables

export EDITOR=nvim
export PAGER=less
export BROWSER=lynx

export XDG_CONFIG_HOME=$HOME/.config
export XDG_CACHE_HOME=$HOME/.cache
export XDG_DATA_HOME=$HOME/.local/share

export GOPATH=${GOPATH:-~/.go}
export GOTMP=/tmp

export GHQ_ROOT=$HOME/repos

export PYTHONPATH=$HOME/.local/lib64/python3.6/site-packages:$PYTHONPATH

export NODE_PATH=${XDG_CONFIG_HOME:-$HOME/.config}/node_modules

export GTK2_RC_FILES=${XDG_CONFIG_HOME:-$HOME/.config}/gtk-2.0/gtkrc
export QT_STYLE_OVERRIDE="GTK+"
export NO_AT_BRIDGE=1

export LPASS_AGENT_TIMEOUT=0
export LPASS_DISABLE_PINENTRY=1
export PASSWORD_STORE_ENABLE_EXTENSIONS=true
export SUDO_ASKPASS=/usr/bin/x11-ssh-askpass

export _JAVA_OPTIONS="-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel"
# }}}

# {{{ PATH

[[ -d "$GOPATH/bin" ]]      && pathmunge $GOPATH/bin
[[ -d "$HOME/.rust/bin" ]]  && pathmunge $HOME/.rust/bin
[[ -d "$HOME/.cask/bin" ]]  && pathmunge $HOME/.cask/bin
[[ -d "$HOME/.local/bin" ]] && pathmunge $HOME/.local/bin
[[ -d "$HOME/bin" ]]        && pathmunge $HOME/bin

# }}}

# {{{ Running profile hooks

. $ZDOT_RUN_HOOKS .shared_env

if [ -n "$shell_interactive" ]; then
    . $ZDOTDIR/.shared_rc
fi

shared_env_loaded=y

# vim:fenc=utf-8:ft=sh:ts=4:sts=4:sw=4:et:fdm=marker:foldlevel=0:
